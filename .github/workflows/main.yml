name: Development ðŸŽ®

on:
  pull_request: { }
  push: { branches: [main] }
  workflow_dispatch: { }

  
jobs:
  tests:
    name: Test in ${{ matrix.testMode }} âœ¨
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - playmode
          - editmode
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id        
      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-test-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-test-
      - name: Run Tests
        uses: game-ci/unity-test-runner@main
        id: test
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} test results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
      - name: Uploads test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
  
  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }}
    needs: [tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android
          - iOS
          - StandaloneLinux64
          - WebGL 
    outputs:
      buildVersion: ${{ steps.build.outputs.buildVersion }}    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0         
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard 
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-build-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-build-${{ matrix.targetPlatform }}-
      - name: Free Disk Space for Android
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.2.0
        with:
          large-packages: false
      - name: Build Unity Project
        id: build
        uses: game-ci/unity-builder@main
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
                          
  buildWithMac:
    name: Build for StandaloneOSX
    needs: [ tests ]
    runs-on: macos-latest
    outputs:
      buildVersion: ${{ steps.build.outputs.buildVersion }}
    timeout-minutes: 90
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-buildMac-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-buildMac-
      - name: Build Unity Project
        id: build
        uses: game-ci/unity-builder@main
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneOSX
          cacheUnityInstallationOnMac: true
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: build-StandaloneOSX
          path: build/StandaloneOSX

#  buildWithWindows:
#    name: Build for ${{ matrix.targetPlatform }}
#    runs-on: windows-2019
#    #needs: [buildWithLinux, buildWithMac]
#    outputs:
#      buildVersion: ${{ steps.build.outputs.buildVersion }}
#    strategy:
#      fail-fast: false
#      matrix:
#        targetPlatform:
#          - StandaloneWindows
#          - StandaloneWindows64
#    timeout-minutes: 90
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#      - name: Create LFS file list
#        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#      - name: Restore LFS cache
#        uses: actions/cache@v3
#        id: lfs-cache
#        with:
#          path: .git/lfs
#          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
#      - name: Git LFS Pull
#        run: |
#          git lfs pull
#          git add .
#          git reset --hard
#      - name: Cache Library
#        uses: actions/cache@v3
#        with:
#          path: Library
#          key: Library-buildWindows-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
#          restore-keys: |
#            Library-buildWindows-${{ matrix.targetPlatform }}-
#            Library-buildWindows-
#      - name: Build Unity Project
#        id: build
#        uses: game-ci/unity-builder@main
#        env:
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#        with:
#          targetPlatform: ${{ matrix.targetPlatform }}
#      - name: Upload Build
#        uses: actions/upload-artifact@v3
#        with:
#          name: build-${{ matrix.targetPlatform }}
#          path: build/${{ matrix.targetPlatform }}